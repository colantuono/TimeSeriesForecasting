---
title: "Previsão"
output: html_document
---

```{r setup, include=FALSE, echo = FALSE}
knitr::opts_chunk$set( echo = FALSE, fig.align = 'center', out.width= '100%', out.height= '100%', dpi= 1000, fig.width= 12, fig.height= 6, warning = FALSE, include = FALSE )
```

```{r dados-configuracoes-gerais, echo=FALSE, message=FALSE, results='hide', include=FALSE, echo = FALSE}

#### Carregando pacotes ####
if(!require(lubridate)){install.packages("lubridate",repos="http://cran-r.c3sl.ufpr.br");library(lubridate);}
if(!require(dplyr)){install.packages("dplyr",repos="http://cran-r.c3sl.ufpr.br");library(dplyr);}
if(!require(tidyverse)){install.packages("tidyverse",repos="http://cran-r.c3sl.ufpr.br");library(tidyverse);}
if(!require(highcharter)){install.packages("highcharter",repos="http://cran-r.c3sl.ufpr.br");library(highcharter);}
if(!require(bizdays)){install.packages("bizdays",repos="http://cran-r.c3sl.ufpr.br");library(bizdays);}
if(!require(data.table)){install.packages("data.table",repos="http://cran-r.c3sl.ufpr.br");library(data.table);}
if(!require(DT)){install.packages("DT",repos="http://cran-r.c3sl.ufpr.br");library(DT);}
if(!require(stringi)){install.packages("stringi",repos="http://cran-r.c3sl.ufpr.br");library(stringi);}
if(!require(stringr)){install.packages("stringr",repos="http://cran-r.c3sl.ufpr.br");library(stringr);}
if(!require(formattable)){install.packages("formattable");library(formattable);} 

if(!require(openxlsx)){install.packages("openxlsx",repos="http://cran-r.c3sl.ufpr.br");library(openxlsx)}
if(!require(tseries)){install.packages("tseries",repos="http://cran-r.c3sl.ufpr.br");library(tseries)}
if(!require(astsa)){install.packages("astsa",repos="http://cran-r.c3sl.ufpr.br");library(astsa)}
if(!require(frequency)){install.packages("frequency",repos="http://cran-r.c3sl.ufpr.br");library(frequency)}
if(!require(forecast)){install.packages("forecast",repos="http://cran-r.c3sl.ufpr.br");library(forecast)}
if(!require(repr)){install.packages("repr",repos="http://cran-r.c3sl.ufpr.br");library(repr)}

```

```{r carrega-dados, echo = FALSE}
# Read data and plot it
load("./../dataMart/faturamento_old.Rda")
load("./../dataMart/faturamento_new.Rda")

faturamento_full <- rbind(faturamento_old, faturamento_new)

fat_full_timeseries_df <- faturamento_full %>% 
    group_by(dta_inc_pedido) %>% 
    summarise(fat = sum(valor_final_item))
fat_full_timeseries_df$dta_inc_pedido <- as.Date(fat_full_timeseries_df$dta_inc_pedido)
library(xts)
# fat_full_timeseries_df <- as.xts(x = fat_full_timeseries_df$fat, order.by = fat_full_timeseries_df$dta_inc_pedido )


oof_size = .95
out_of_time <- tail(faturamento_full, round(length(faturamento_full$dta_inc_pedido)*(1-oof_size))) 

faturamento <- head(faturamento_full, round(length(faturamento_full$dta_inc_pedido)*oof_size))

# 
fat_timeseries_df <- faturamento %>% 
    group_by(dta_inc_pedido) %>% 
    summarise(fat = sum(valor_final_item))
fat_timeseries_df$dta_inc_pedido <- as.Date(fat_timeseries_df$dta_inc_pedido)

df <- ts(fat_timeseries_df$fat)


oof_timeseries_df <- out_of_time %>% 
    group_by(dta_inc_pedido) %>% 
    summarise(fat = sum(valor_final_item))
oof_timeseries_df$dta_inc_pedido <- as.Date(oof_timeseries_df$dta_inc_pedido)

oof_ts <- ts(oof_timeseries_df$fat)

# faturamento_full %>% hchart(
#   'line', hcaes(x = dta_inc_pedido, y = valor_final_item, lineWidth=1),
#   color = "steelblue"
#   ) %>% hc_chart(zoomType = "x")   

```

```{r}
z <- as.Date(fat_full_timeseries_df$dta_inc_pedido)

units <- ts(fat_full_timeseries_df$fat, frequency = 365)

decomp <- stl(units, s.window = "periodic")
decomp_data <- as.data.frame(decomp[["time.series"]])

plot(decomp)

```


```{r}

## checando estacionaridade
ddf <- diff(fat_full_timeseries_df$fat)
ts.plot(fat_full_timeseries_df$fat, xlab = "Day", ylab = "Incremental Revenue", main = "Daily Revenue")
legend("topleft", 'Revenue', lty = 1, col = 1:1, bty = "n")
adf.test(ddf)
ddf <- diff(df)

ts.plot(ddf, xlab = "Day", ylab = "Incremental Revenue", main = "Daily Revenue")
legend("topleft", 'Revenue', lty = 1, col = 1:1, bty = "n")

adf.test(fat_full_timeseries_df$fat)
```
```{r}
mean(ddf)
```


```{r}
## checando sazonalidade
mean(ddf)
t.test(ddf, mu = 10, alternative = "less")

```

```{r}
test_size = .95


training <- head(df, round(length(df)*test_size))
testing <- tail(df, round(length(df)*(1-test_size)))

# testing <- head(df, round(length(testing_outOfSample)*.66))
# out_of_sample <- tail(df, round(length(testing_outOfSample)*.33))


# Autocorrelations
# acf2(diff(training))
acf2(training)
```

```{r}
auto.arima(training, trace=TRUE)
```

```{r}
p=2
d=2
q=3

# Create Predictions using SARIMA model
sarima(training, p=p, d=d, q=q)
```

```{r}
# sarima.for(log(AirPassengers),12,0,1,0, 0,1,1,12)

pred <- sarima.for(training, n.ahead=length(testing), p=p, d=d, q=q,     0,1,1,7,     plot.all=F)
# abline(v = ts(length(df)), col = "brown", lty = 2)
abline(v = ts(length(training)), col = "brown", lty = 2);
points(testing, type = "l", col = "blue" , lty = 2)
title(main="Daily Revenue - Prediction Vs Actual")
```

```{r}
hc <- highchart(type = "chart") %>% 
  hc_title( text = 'Forecast', style = list( color = "#004589", fontSize = "15px") ) %>%
  hc_chart(zoomType = "x") %>%
  # hc_xAxis( categories = unique(hc_df$ds) %>% as.Date(format = "%d-%m-%y")) %>%
  hc_tooltip( crosshairs = TRUE, borderWidth = 3, sort = TRUE, table = TRUE, valueDecimals = 0
              , pointFormat = "<br/><span style='color:{point.color}'>\u25CF</span>{series.name}: <b> {point.y}</b>" ) %>%
  
    # hc_add_series(type = "line"
    #               , color = "red"
    #               , name = "training"
    #               , marker = list( radius = .5)
    #               , data = list_parse2(data.frame(#date = format.Date(  hc_df$ds,"%B/%Y"),
    #                                               value = as.numeric(training)))
    #               ) %>%

    hc_add_series(type = "line"
                , color = "blue"
                , name = "testing"
                , marker = list( radius = .5)
                , data = list_parse2(data.frame(#date = format.Date(  hc_df$ds,"%B/%Y"),
                                                value = as.numeric(testing)))
                ) %>%

    hc_add_series(type = "line"
                , color = "green"
                , name = "Pred"
                , marker = list( radius = .5)
                , data = list_parse2(data.frame(#date = format.Date(  hc_df$ds,"%B/%Y"),
                                                value = as.numeric(pred$pred)))
                ) %>%

    # hc_add_series(type = "line"
    #             , color = "#90ed7d"
    #             , name = "Grau de Confiança - Inferior"
    #             , marker = list( radius = .5)
    #             , data = list_parse2(data.frame(#date = format.Date(  hc_df$ds,"%B/%Y"),
    #                                             value = as.numeric(hc_df$lower)))
    #             ) %>%    
    
   hc_exporting(
    enabled = TRUE, # always enabled
    filename = "reports/previsao_faturamento"
  ) %>% 
  hc_add_theme(hc_theme_gridlight())

hc
```


```{r}

full_ts <- ts( c(training, testing), start = start(training),  frequency = frequency(training) )


pred_oot <- sarima.for(full_ts, n.ahead=length(oof_ts), p=p, d=d, q=q,     0,1,1,7,     plot.all=F)
# abline(v = ts(length(df)), col = "brown", lty = 2)
abline(v = ts(length(oof_ts)), col = "brown", lty = 2);
points(oof_ts, type = "l", col = "blue" , lty = 2)
title(main="Daily Revenue - Prediction Vs Actual")
```


```{r}

# full_pred <- ts( c(pred$pred, pred_oot$pred), start = start(pred$pred),  frequency = frequency(pred$pred) )

# full_real <- ts( c(testing, oof_ts), start = start(testing),  frequency = frequency(testing) )

hc <- highchart(type = "chart") %>% 
  hc_title( text = 'Forecast', style = list( color = "#004589", fontSize = "15px") ) %>%
  hc_chart(zoomType = "x") %>%
  # hc_xAxis( categories = unique(hc_df$ds) %>% as.Date(format = "%d-%m-%y")) %>%
  hc_tooltip( crosshairs = TRUE, borderWidth = 3, sort = TRUE, table = TRUE, valueDecimals = 0
              , pointFormat = "<br/><span style='color:{point.color}'>\u25CF</span>{series.name}: <b> {point.y}</b>" ) %>%
  
    # hc_add_series(type = "line"
    #               , color = "red"
    #               , name = "training"
    #               , marker = list( radius = .5)
    #               , data = list_parse2(data.frame(#date = format.Date(  hc_df$ds,"%B/%Y"),
    #                                               value = as.numeric(training)))
    #               ) %>%

    hc_add_series(type = "line"
                , color = "blue"
                , name = "REAL"
                , marker = list( radius = .5)
                , data = list_parse2(data.frame(#date = format.Date(  hc_df$ds,"%B/%Y"),
                                                value = as.numeric(oof_ts)))
                ) %>%

    hc_add_series(type = "line"
                , color = "green"
                , name = "PREVISÃO"
                , marker = list( radius = .5)
                , data = list_parse2(data.frame(#date = format.Date(  hc_df$ds,"%B/%Y"),
                                                value = as.numeric(pred_oot$pred)))
                ) %>%

    # hc_add_series(type = "line"
    #             , color = "#90ed7d"
    #             , name = "Grau de Confiança - Inferior"
    #             , marker = list( radius = .5)
    #             , data = list_parse2(data.frame(#date = format.Date(  hc_df$ds,"%B/%Y"),
    #                                             value = as.numeric(hc_df$lower)))
    #             ) %>%    
    
   hc_exporting(
    enabled = TRUE, # always enabled
    filename = "reports/previsao_faturamento"
  ) %>% 
  hc_add_theme(hc_theme_gridlight())

hc
```


```{r}
library(highcharter)

hc <- highchart(type = "chart") %>% 
  hc_title( text = 'Forecast', style = list( color = "#004589", fontSize = "15px") ) %>%
  hc_chart(zoomType = "x") %>%
  # hc_xAxis( categories = unique(hc_df$ds) %>% as.Date(format = "%d-%m-%y")) %>%
  hc_tooltip( crosshairs = TRUE, borderWidth = 3, sort = TRUE, table = TRUE, valueDecimals = 0
              , pointFormat = "<br/><span style='color:{point.color}'>\u25CF</span>{series.name}: <b> {point.y}</b>" ) %>%
  
    # hc_add_series(type = "line"
    #               , color = "red"
    #               , name = "training"
    #               , marker = list( radius = .5)
    #               , data = list_parse2(data.frame(#date = format.Date(  hc_df$ds,"%B/%Y"),
    #                                               value = as.numeric(training)))
    #               ) %>%

    hc_add_series(type = "line"
                , color = "#7cfcca"
                , name = "REAL"
                , data = list_parse2(data.frame(#date = format.Date(  hc_df$ds,"%B/%Y"),
                                                value = as.numeric(faturamento_full$valor_final_item)))
                ) %>%
    

  hc_plotOptions(area = list( lineWidth = .15 )) %>%

    # hc_add_series(type = "line"
    #             , color = "green"
    #             , name = "PREVISÃO"
    #             , marker = list( radius = .5)
    #             , data = list_parse2(data.frame(#date = format.Date(  hc_df$ds,"%B/%Y"),
    #                                             value = as.numeric(pred_oot$pred)))
    #             ) %>%

    # hc_add_series(type = "line"
    #             , color = "#90ed7d"
    #             , name = "Grau de Confiança - Inferior"
    #             , marker = list( radius = .5)
    #             , data = list_parse2(data.frame(#date = format.Date(  hc_df$ds,"%B/%Y"),
    #                                             value = as.numeric(hc_df$lower)))
    #             ) %>%    
    
   hc_exporting(
    enabled = TRUE, # always enabled
    filename = "reports/previsao_faturamento"
  ) %>% 
  hc_add_theme(hc_theme_gridlight())

hc
```

```{r}
# Find MAPE (error in the predictions - Mean Absolute Percent Error)
mean(abs((testing-pred$pred)/testing)) * 100
```

```{r}
# Create final chart with annotations and various components
plot(df, main="", xlab="", ylab="", col = 'green')
points(testing, type = "l", col = "blue" , lty = 2)
abline(v = ts(c(length(df)*0.75)), col = "brown")
# abline(v = ts(seq(1, 731, 10)), col = "black", lty = 1000)
abline(h=seq(0, 20, 5), col="black", lty = 1000)
points(pred$pred, type = "l", col = "red" )
x <- seq(1, length(training), 1)
lmod <- lm(c(training)~x)
lines(predict(lmod),col='darkgreen')
lpred <- predict(lmod, newdata = data.frame(x = seq(549, 731, 1)))
points(y=lpred,x=seq(549,731,1),type='l',col = "darkgreen" , lty = 2)
# 
# axis(1, seq(0,length(training),50), font=2)
# axis(2, seq(0,20,5), font=2)
# mtext(side=1, line=1.5, "Time (Number of Days)", col="orange", font=2)
# mtext(side=2, line=1.5, "Daily Revenue (million dollars)", col="orange", font=2)
# mtext(side=3, line=0, "Daily Revenue - Predicted (SARIMA) Vs Actual (Test Set)", col="blue", font=4)
# text(x=650, y=9, labels="Predicted vs Actual", font=2)
# text(x=300, y=6, labels="Training Set Data", font=2)
# text(x=650,y=14.5,"Predicted Values",srt=30, col="red", font=2)
# text(x=650,y=17,"Linear Model Predictions",srt=30, col="darkgreen", font=2)
# text(x=110,y=5,"Linear Trend Line",srt=30, col="darkgreen", font=2)
```
























