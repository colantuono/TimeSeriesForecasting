mean(abs((realizado_t_s-pred_test_t_s) / realizado_t_s)) * 100
# mean(abs((data$actual-data$forecast)/data$actual)) * 100
mean(abs((realizado_t_s-pred_test_t_s)))# / realizado_t_s)) * 100
# mean(abs((data$actual-data$forecast)/data$actual)) * 100
mean(abs((realizado_oos-pred_oos_t_s)))# / realizado_oos)) * 100
mean(realizado_oos)
75/500
mae / mean(realizado_oos)
# mean(abs((data$actual-data$forecast)/data$actual)) * 100
mae <- mean(abs((realizado_oos-pred_oos_t_s)))# / realizado_oos)) * 100
mae / mean(realizado_oos)
mae / mean(realizado_oos) * 100
mae / mean(realizado_t_s) * 100
# mean(abs((data$actual-data$forecast)/data$actual)) * 100
mae <- mean(abs((realizado_t_s-pred_test_t_s)))# / realizado_t_s)) * 100
mae / mean(realizado_t_s) * 100
# mean(abs((data$actual-data$forecast)/data$actual)) * 100
mae <- mean(abs((realizado_oos-pred_oos_t_s)))# / realizado_oos)) * 100
mae / mean(realizado_oos) * 100
# mean(abs((data$actual-data$forecast)/data$actual)) * 100
# mean(abs((realizado_t_s-pred_test_t_s)))# / realizado_t_s)) * 100
mae <- mean(abs((realizado_t_s-pred_test_t_s)))# / realizado_oos)) * 100
mae / mean(realizado_t_s) * 100
# mean(abs((data$actual-data$forecast)/data$actual)) * 100
# mean(abs((realizado_t_s-pred_test_t_s)))# / realizado_t_s)) * 100
mae <- mean(abs((realizado_t_s-pred_test_t_s)))# / realizado_oos)) * 100
print(mae)
print(mean(realizado_t_s))
mae / mean(realizado_t_s) * 100
length(pred_te)
# mean(abs((data$actual-data$forecast)/data$actual)) * 100
# mean(abs((realizado_t_s-pred_test_t_s)))# / realizado_t_s)) * 100
length(realizado_t_s)
length(pred_test_t_s)
mae <- mean(abs((realizado_t_s-pred_test_t_s)))# / realizado_oos)) * 100
print(mae)
print(mean(realizado_t_s))
mae / mean(realizado_t_s) * 100
testing_plot <- ts(testing)
pred_test <- sarima.for(training, n.ahead=length(testing), p=4, d=0, q=2, 0,1,1,7,  plot=F)
# pred_test_t_s <- head(ts(pred_test$pred, frequency=1) + ts(testing_t_s, frequency = 1),197)
# realizado_t_s <- tail(ts(testing_plot, frequency=1) + ts(testing_t_s, frequency = 1),198)
pred_test_t_s <- ts(pred_test$pred, frequency=1) + ts(testing_t_s, frequency = 1)
realizado_t_s <- ts(testing_plot, frequency=1) + ts(testing_t_s, frequency = 1)
shift <- -5
# filter <- 9
pred_test_t_s_shifted <- shift(pred_test_t_s, shift)
# realizado_t_s <- realizado_t_s[c(filter:length(realizado_t_s))]
hc <- highchart(type = "chart") %>%
hc_title( text = 'Forecast TESTING', style = list( color = "#004589", fontSize = "15px") ) %>%
hc_chart(zoomType = "x") %>%
hc_xAxis( categories = unique(index(testing)) %>% as.Date(format = "%d-%m-%y")) %>%
hc_tooltip( crosshairs = TRUE, borderWidth = 3, sort = TRUE, table = TRUE, valueDecimals = 0
, pointFormat = "<br/><span style='color:{point.color}'>\u25CF</span>{series.name}: <b> {point.y}</b>" ) %>%
hc_add_series(type = "line"
, color = "blue"
, name = "Previsão"
, marker = list( radius = .5)
, data = list_parse2(data.frame(value = as.numeric(pred_test_t_s_shifted)))) %>%
hc_add_series(type = "line"
, color = "green"
, name = "Realizado "
, marker = list( radius = .5)
, data = list_parse2(data.frame(value = as.numeric(realizado_t_s)))) %>%
hc_exporting(
enabled = TRUE, # always enabled
filename = "reports/previsao_faturamento"
) %>%
hc_add_theme(hc_theme_gridlight())
hc
# mean(abs((data$actual-data$forecast)/data$actual)) * 100
# mean(abs((realizado_t_s-pred_test_t_s)))# / realizado_t_s)) * 100
length(realizado_t_s)
length(pred_test_t_s)
mae <- mean(abs((realizado_t_s-pred_test_t_s)))# / realizado_oos)) * 100
print(mae)
print(mean(realizado_t_s))
mae / mean(realizado_t_s) * 100
realizado_t_s
pred_test_t_s
# mean(abs((data$actual-data$forecast)/data$actual)) * 100
# mean(abs((realizado_t_s-pred_test_t_s)))# / realizado_t_s)) * 100
length(head(realizado_t_s,200))
length(head(pred_test_t_s,200))
mae <- mean(abs(( (head(realizado_t_s,200)) - (head(pred_test_t_s,200)) )))# / realizado_oos)) * 100
print(mae)
print(mean(realizado_t_s))
mae / mean(realizado_t_s) * 100
32/437
320/43
320/430
testing_plot <- ts(testing)
pred_test <- sarima.for(training, n.ahead=length(testing), p=4, d=0, q=2, 0,1,1,7,  plot=F)
iselse(pred_test_t_s < 0,0,pred_test_t_s)
ifelse(pred_test_t_s < 0,0,pred_test_t_s)
testing_plot <- ts(testing)
pred_test <- sarima.for(training, n.ahead=length(testing), p=4, d=0, q=2, 0,1,1,7,  plot=F)
# pred_test_t_s <- head(ts(pred_test$pred, frequency=1) + ts(testing_t_s, frequency = 1),197)
# realizado_t_s <- tail(ts(testing_plot, frequency=1) + ts(testing_t_s, frequency = 1),198)
pred_test_t_s <- ts(pred_test$pred, frequency=1) + ts(testing_t_s, frequency = 1)
realizado_t_s <- ts(testing_plot, frequency=1) + ts(testing_t_s, frequency = 1)
ifelse(pred_test_t_s < 0,0,pred_test_t_s)
shift <- -5
# filter <- 9
pred_test_t_s_shifted <- shift(pred_test_t_s, shift)
# realizado_t_s <- realizado_t_s[c(filter:length(realizado_t_s))]
hc <- highchart(type = "chart") %>%
hc_title( text = 'Forecast TESTING', style = list( color = "#004589", fontSize = "15px") ) %>%
hc_chart(zoomType = "x") %>%
hc_xAxis( categories = unique(index(testing)) %>% as.Date(format = "%d-%m-%y")) %>%
hc_tooltip( crosshairs = TRUE, borderWidth = 3, sort = TRUE, table = TRUE, valueDecimals = 0
, pointFormat = "<br/><span style='color:{point.color}'>\u25CF</span>{series.name}: <b> {point.y}</b>" ) %>%
hc_add_series(type = "line"
, color = "blue"
, name = "Previsão"
, marker = list( radius = .5)
, data = list_parse2(data.frame(value = as.numeric(pred_test_t_s_shifted)))) %>%
hc_add_series(type = "line"
, color = "green"
, name = "Realizado "
, marker = list( radius = .5)
, data = list_parse2(data.frame(value = as.numeric(realizado_t_s)))) %>%
hc_exporting(
enabled = TRUE, # always enabled
filename = "reports/previsao_faturamento"
) %>%
hc_add_theme(hc_theme_gridlight())
hc
testing_plot <- ts(testing)
pred_test <- sarima.for(training, n.ahead=length(testing), p=4, d=0, q=2, 0,1,1,7,  plot=F)
# pred_test_t_s <- head(ts(pred_test$pred, frequency=1) + ts(testing_t_s, frequency = 1),197)
# realizado_t_s <- tail(ts(testing_plot, frequency=1) + ts(testing_t_s, frequency = 1),198)
pred_test_t_s <- ts(pred_test$pred, frequency=1) + ts(testing_t_s, frequency = 1)
realizado_t_s <- ts(testing_plot, frequency=1) + ts(testing_t_s, frequency = 1)
pred_test_t_s <- ifelse(pred_test_t_s < 0,0,pred_test_t_s)
shift <- -5
# filter <- 9
pred_test_t_s_shifted <- shift(pred_test_t_s, shift)
# realizado_t_s <- realizado_t_s[c(filter:length(realizado_t_s))]
hc <- highchart(type = "chart") %>%
hc_title( text = 'Forecast TESTING', style = list( color = "#004589", fontSize = "15px") ) %>%
hc_chart(zoomType = "x") %>%
hc_xAxis( categories = unique(index(testing)) %>% as.Date(format = "%d-%m-%y")) %>%
hc_tooltip( crosshairs = TRUE, borderWidth = 3, sort = TRUE, table = TRUE, valueDecimals = 0
, pointFormat = "<br/><span style='color:{point.color}'>\u25CF</span>{series.name}: <b> {point.y}</b>" ) %>%
hc_add_series(type = "line"
, color = "blue"
, name = "Previsão"
, marker = list( radius = .5)
, data = list_parse2(data.frame(value = as.numeric(pred_test_t_s_shifted)))) %>%
hc_add_series(type = "line"
, color = "green"
, name = "Realizado "
, marker = list( radius = .5)
, data = list_parse2(data.frame(value = as.numeric(realizado_t_s)))) %>%
hc_exporting(
enabled = TRUE, # always enabled
filename = "reports/previsao_faturamento"
) %>%
hc_add_theme(hc_theme_gridlight())
hc
# mean(abs((data$actual-data$forecast)/data$actual)) * 100
# mean(abs((realizado_t_s-pred_test_t_s)))# / realizado_t_s)) * 100
length(head(realizado_t_s,200))
length(head(pred_test_t_s,200))
mae <- mean(abs(( (head(realizado_t_s,200)) - (head(pred_test_t_s,200)) )))# / realizado_oos)) * 100
print(mae)
print(mean(realizado_t_s))
mae / mean(realizado_t_s) * 100
# mean(abs((data$actual-data$forecast)/data$actual)) * 100
# mean(abs((realizado_t_s-pred_test_t_s)))# / realizado_t_s)) * 100
mae <- mean(abs(( (head(realizado_t_s,200)) - (head(pred_test_t_s,200)) )))# / realizado_oos)) * 100
print(mae)
print(mean(realizado_t_s))
mae / mean(realizado_t_s) * 100
train_test_plot <- ts(train_test)
pred_oos <- sarima.for(train_test, n.ahead=length(out_of_sample), p=4, d=0, q=2, 0,1,1,7,  plot=F)
pred_oos_t_s <- ts(pred_oos$pred, frequency=1) + ts(out_of_sample_t_s, frequency = 1)
realizado_oos <- (ts(out_of_sample, frequency=1) + ts(tail(trend_season,length(out_of_sample)), frequency = 1))
hc <- highchart(type = "chart") %>%
hc_title( text = 'Forecast OUT OF SAMPLE', style = list( color = "#004589", fontSize = "15px") ) %>%
hc_chart(zoomType = "x") %>%
hc_xAxis( categories = unique(index(out_of_sample)) %>% as.Date(format = "%d-%m-%y")) %>%
hc_yAxis(
plotLines = list(
list(
label = list(text = "NS de Aparecida"),
color = "#FF0000",
width = 5,
value = datetime_to_timestamp(as.Date('2022-10-12', tz = 'UTC'))
)
)
) %>%
hc_tooltip( crosshairs = TRUE, borderWidth = 3, sort = TRUE, table = TRUE, valueDecimals = 0
, pointFormat = "<br/><span style='color:{point.color}'>\u25CF</span>{series.name}: <b> {point.y}</b>" ) %>%
hc_add_series(type = "line"
, color = "blue"
, name = "Previsão"
, marker = list( radius = .5)
, data = list_parse2(data.frame(value = as.numeric(pred_oos_t_s)))) %>%
hc_add_series(type = "line"
, color = "green"
, name = "Realizado "
, marker = list( radius = .5)
, data = list_parse2(data.frame(value = as.numeric(realizado_oos)))) %>%
hc_exporting(
enabled = TRUE, # always enabled
filename = "reports/previsao_faturamento"
) %>%
hc_add_theme(hc_theme_gridlight())
hc
print(mean(pred_test_t_s))
print(mean(realizado_t_s))
mean(head(realizado_t_s,200))
mean(head(realizado_t_s,200))
mean(head(pred_test_t_s,200))
mean(head(realizado_t_s,200)) - mean(head(pred_test_t_s,200))
abs( mean(head(realizado_t_s,200)) - mean(head(pred_test_t_s,200)) )
mae <- abs( mean(head(realizado_t_s,200)) - mean(head(pred_test_t_s,200)) )
mae <- abs( mean(head(realizado_t_s,200)) - mean(head(pred_test_t_s,200)) )
mae
mae <- abs( mean(head(realizado_t_s,200)) - mean(head(pred_test_t_s,200)) )
mae / mean(realizado_t_s)
mae <- abs( mean(head(realizado_t_s,200)) - mean(head(pred_test_t_s,200)) )
mae / mean(realizado_t_s) * 100
# mean(abs((data$actual-data$forecast)/data$actual)) * 100
mae <- mean(abs((realizado_oos-pred_oos_t_s)))# / realizado_oos)) * 100
mae / mean(realizado_oos) * 100
mae <- abs( mean(head(realizado_oos,200)) - mean(head(pred_oos_t_s,200)) )
mae / mean(realizado_oos) * 100
mae <- abs( mean(head(realizado_oos,200)) - mean(head(pred_oos_t_s,200)) )
mae / mean(realizado_oos) * 100
mae <- abs( mean(head(realizado_oos,200)) - mean(head(pred_oos_t_s,200)) )
print(mae)
mae / mean(realizado_oos) * 100
MAE_ratio = round(mae/mean(realizado_oos) * 100, 2)
mae <- abs( mean(head(realizado_oos,200)) - mean(head(pred_oos_t_s,200)) )
print(mae)
mae / mean(realizado_oos) * 100
print(
MAE_ratio <- round(mae/mean(realizado_oos) * 100, 2)
)
np.average(np.abs(y_pred - y_true))
# np.average(np.abs(y_pred - y_true))
mean(abs(pred_oos_t_s-realizado_oos))
mae <- abs( mean(head(realizado_oos,200)) - mean(head(pred_oos_t_s,200)) )
print(mae)
mae / mean(realizado_oos) * 100
print(
MAE_ratio <- round(mae/mean(realizado_oos) * 100, 2)
)
# np.average(np.abs(y_pred - y_true))
mae <- mean(abs(pred_oos_t_s-realizado_oos))
mape <- mae / mean(realizado_oos) * 100
mae
mape
100-15
mae <- mean(abs(pred_oos_t_s-realizado_oos))
mape <- mae / mean(realizado_oos) * 100
mae
mape
print('O modelo acertou 85% das previsões')
mae <- mean(abs(pred_oos_t_s-realizado_oos))
mape <- mae / mean(realizado_oos) * 100
mae
mape
print("O modelo acertou ", 1-mape , " das previsões")
mae <- mean(abs(pred_oos_t_s-realizado_oos))
mape <- mae / mean(realizado_oos) * 100
mae
mape
print("O modelo acertou ", 1 - mape , " das previsões")
mae <- mean(abs(pred_oos_t_s-realizado_oos))
mape <- mae / mean(realizado_oos) * 100
mae
mape
print("O modelo acertou ", (1 - mape) , " das previsões")
mae <- mean(abs(pred_oos_t_s-realizado_oos))
mape <- mae / mean(realizado_oos) * 100
mae
mape
print("O modelo acertou ", (1 - mape) , " das previsões")
mae <- mean(abs(pred_oos_t_s-realizado_oos))
mape <- mae / mean(realizado_oos) * 100
mae
mape
# print("O modelo acertou ", (1 - mape) , " das previsões")
1-mape
mae <- mean(abs(pred_oos_t_s-realizado_oos))
mape <- mae / mean(realizado_oos) * 100
mae
mape
# print("O modelo acertou ", (mape-1) , " das previsões")
1-mape
mae <- mean(abs(pred_oos_t_s-realizado_oos))
mape <- mae / mean(realizado_oos) * 100
mae
mape
# print("O modelo acertou ", (mape-1) , " das previsões")
mape-1
mae <- mean(abs(pred_oos_t_s-realizado_oos))
mape <- mae / mean(realizado_oos) * 100
mae
mape
print("O modelo acertou ", 100-mape , " das previsões")
mae <- mean(abs(pred_oos_t_s-realizado_oos))
mape <- mae / mean(realizado_oos) * 100
acertos <- 100-mape
mae
mape
print("O modelo acertou ", acertos , "% das previsões")
mae <- mean(abs(pred_oos_t_s-realizado_oos))
mape <- mae / mean(realizado_oos) * 100
acertos <- 100-mape
mae
mape
print(paste0("O modelo acertou ", acertos , "% das previsões"))
mape-1
mae <- mean(abs(pred_oos_t_s-realizado_oos))
mape <- mae / mean(realizado_oos) * 100
acertos <- round(100-mape,2)
mae
mape
print(paste0("O modelo acertou ", acertos , "% das previsões"))
mae <- mean(abs(pred_test_t_s-realizado_t_s))
mape <- mae / mean(realizado_t_s) * 100
acertos <- round(100-mape,2)
mae
mape
print(paste0("O modelo acertou ", acertos , "% das previsões"))
mae <- mean(abs(pred_test_t_s_shifted-realizado_t_s))
mape <- mae / mean(realizado_t_s) * 100
acertos <- round(100-mape,2)
mae
mape
print(paste0("O modelo acertou ", acertos , "% das previsões"))
mean(pred_test_t_s_shifted)
mean(na.omit(pred_test_t_s_shifted))
mean(na.omit(pred_test_t_s_shifted))
mean(realizado_t_s)
mae <- mean(abs(na.omit(pred_test_t_s_shifted)-realizado_t_s))
mape <- mae / mean(realizado_t_s) * 100
acertos <- round(100-mape,2)
mae
mape
print(paste0("O modelo acertou ", acertos , "% das previsões"))
#pred_test_t_s_shifted
#pred_test_t_s
mae <- mean(abs(na.omit(pred_test_t_s)-realizado_t_s))
mape <- mae / mean(realizado_t_s) * 100
acertos <- round(100-mape,2)
mae
mape
print(paste0("O modelo acertou ", acertos , "% das previsões"))
#pred_test_t_s_shifted
#pred_test_t_s
mae <- mean(abs(na.omit(pred_test_t_s_shifted)-realizado_t_s))
mape <- mae / mean(realizado_t_s) * 100
acertos <- round(100-mape,2)
mae
mape
print(paste0("O modelo acertou ", acertos , "% das previsões"))
source("C:/Users/joao.colantuono/TimeSeriesForecasting/ETL.R", echo=TRUE)
gc()
knitr::opts_chunk$set( echo = FALSE, fig.align = 'center', out.width= '100%', out.height= '100%', dpi= 1000, fig.width= 12, fig.height= 6, warning = FALSE, include = FALSE )
if(!require(tseries)){install.packages("tseries",repos="http://cran-r.c3sl.ufpr.br");library(tseries)}
if(!require(astsa)){install.packages("astsa",repos="http://cran-r.c3sl.ufpr.br");library(astsa)}
if(!require(frequency)){install.packages("frequency",repos="http://cran-r.c3sl.ufpr.br");library(frequency)}
if(!require(forecast)){install.packages("forecast",repos="http://cran-r.c3sl.ufpr.br");library(forecast)}
if(!require(repr)){install.packages("repr",repos="http://cran-r.c3sl.ufpr.br");library(repr)}
if(!require(xts)){install.packages("xts",repos="http://cran-r.c3sl.ufpr.br");library(xts)}
if(!require(highcharter)){install.packages("highcharter",repos="http://cran-r.c3sl.ufpr.br");library(highcharter)}
if(!require(data.table)){install.packages("data.table",repos="http://cran-r.c3sl.ufpr.br");library(data.table)}
load("./../dataMart/faturamento_old.Rda")
load("./../dataMart/faturamento_new.Rda")
fat <- rbind(faturamento_old, faturamento_new)
fat$dta_inc_pedido <- as.Date(fat$dta_inc_pedido)
dates <- seq(as.Date(fat$dta_inc_pedido[1]), length=length((fat$dta_inc_pedido)), by="days")
timeseries <- xts(x=fat$valor_final_item, order.by = dates)
ts <- ts(fat$valor_final_item, frequency = 365)
decomp_ts <- stl(ts, 'periodic')
seasonal_decomp_ts   <- decomp_ts$time.series[,1]
trend_decomp_ts     <- decomp_ts$time.series[,2]
trend_season <- seasonal_decomp_ts + trend_decomp_ts
remainder <- decomp_ts$time.series[,3]
plot(ts)
plot(trend_season)
plot(seasonal_decomp_ts)
plot(remainder)
dates <- seq(as.Date(fat$dta_inc_pedido[1]), length=length((fat$dta_inc_pedido)), by="days")
remainder_ts <- xts(x=remainder, order.by = dates)
acf1(remainder_ts)
oos_size <- .95
out_of_sample <- tail(remainder_ts, round(length(remainder_ts) * (1-oos_size)))
train_test    <- head(remainder_ts, round(length(remainder_ts) * oos_size))
#trend_season
out_of_sample_t_s <- tail(trend_season, round(length(trend_season) * (1-oos_size)))
train_test_t_s <- head(trend_season, round(length(trend_season) * oos_size))
test_size <- .90
testing <- tail(train_test, round(length(train_test) * (1-test_size)))
training <- head(train_test, round(length(train_test) * oos_size))
testing_t_s <- tail(train_test_t_s, round(length(train_test_t_s) * (1-test_size)))
training_t_s <- head(train_test_t_s, round(length(train_test_t_s) * oos_size))
auto.arima(training, trace=TRUE)
# Create Predictions using SARIMA model
sarima(training, p=4, d=0, q=2)
testing_plot <- ts(testing)
pred_test <- sarima.for(training, n.ahead=length(testing), p=4, d=0, q=2, 0,1,1,7,  plot=F)
# pred_test_t_s <- head(ts(pred_test$pred, frequency=1) + ts(testing_t_s, frequency = 1),197)
# realizado_t_s <- tail(ts(testing_plot, frequency=1) + ts(testing_t_s, frequency = 1),198)
pred_test_t_s <- ts(pred_test$pred, frequency=1) + ts(testing_t_s, frequency = 1)
realizado_t_s <- ts(testing_plot, frequency=1) + ts(testing_t_s, frequency = 1)
pred_test_t_s <- ifelse(pred_test_t_s < 0,0,pred_test_t_s)
shift <- -5
# filter <- 9
pred_test_t_s_shifted <- shift(pred_test_t_s, shift)
# realizado_t_s <- realizado_t_s[c(filter:length(realizado_t_s))]
hc <- highchart(type = "chart") %>%
hc_title( text = 'Forecast TESTING', style = list( color = "#004589", fontSize = "15px") ) %>%
hc_chart(zoomType = "x") %>%
hc_xAxis( categories = unique(index(testing)) %>% as.Date(format = "%d-%m-%y")) %>%
hc_tooltip( crosshairs = TRUE, borderWidth = 3, sort = TRUE, table = TRUE, valueDecimals = 0
, pointFormat = "<br/><span style='color:{point.color}'>\u25CF</span>{series.name}: <b> {point.y}</b>" ) %>%
hc_add_series(type = "line"
, color = "blue"
, name = "Previsão"
, marker = list( radius = .5)
, data = list_parse2(data.frame(value = as.numeric(pred_test_t_s_shifted)))) %>%
hc_add_series(type = "line"
, color = "green"
, name = "Realizado "
, marker = list( radius = .5)
, data = list_parse2(data.frame(value = as.numeric(realizado_t_s)))) %>%
hc_exporting(
enabled = TRUE, # always enabled
filename = "reports/previsao_faturamento"
) %>%
hc_add_theme(hc_theme_gridlight())
hc
mae <- mean(abs(na.omit(pred_test_t_s_shifted)-realizado_t_s))
mape <- mae / mean(realizado_t_s) * 100
acertos <- round(100-mape,2)
mae
mape
print(paste0("O modelo acertou ", acertos , "% das previsões"))
train_test_plot <- ts(train_test)
pred_oos <- sarima.for(train_test, n.ahead=length(out_of_sample), p=4, d=0, q=2, 0,1,1,7,  plot=F)
pred_oos_t_s <- ts(pred_oos$pred, frequency=1) + ts(out_of_sample_t_s, frequency = 1)
realizado_oos <- (ts(out_of_sample, frequency=1) + ts(tail(trend_season,length(out_of_sample)), frequency = 1))
hc <- highchart(type = "chart") %>%
hc_title( text = 'Forecast OUT OF SAMPLE', style = list( color = "#004589", fontSize = "15px") ) %>%
hc_chart(zoomType = "x") %>%
hc_xAxis( categories = unique(index(out_of_sample)) %>% as.Date(format = "%d-%m-%y")) %>%
hc_yAxis(
plotLines = list(
list(
label = list(text = "NS de Aparecida"),
color = "#FF0000",
width = 5,
value = datetime_to_timestamp(as.Date('2022-10-12', tz = 'UTC'))
)
)
) %>%
hc_tooltip( crosshairs = TRUE, borderWidth = 3, sort = TRUE, table = TRUE, valueDecimals = 0
, pointFormat = "<br/><span style='color:{point.color}'>\u25CF</span>{series.name}: <b> {point.y}</b>" ) %>%
hc_add_series(type = "line"
, color = "blue"
, name = "Previsão"
, marker = list( radius = .5)
, data = list_parse2(data.frame(value = as.numeric(pred_oos_t_s)))) %>%
hc_add_series(type = "line"
, color = "green"
, name = "Realizado "
, marker = list( radius = .5)
, data = list_parse2(data.frame(value = as.numeric(realizado_oos)))) %>%
hc_exporting(
enabled = TRUE, # always enabled
filename = "reports/previsao_faturamento"
) %>%
hc_add_theme(hc_theme_gridlight())
hc
## CORRETO
mae <- mean(abs(pred_oos_t_s-realizado_oos))
mape <- mae / mean(realizado_oos) * 100
acertos <- round(100-mape,2)
mae
mape
print(paste0("O modelo acertou ", acertos , "% das previsões"))
dias <- 60
remainder_plot <- ts(remainder_ts)
PREVISAO_remainder <- sarima.for(remainder_ts, n.ahead=dias, p=4, d=0, q=2, 0,1,1,7,  plot=F)
PREVISAO_t_s <- sarima.for(trend_season, n.ahead=dias, p=4, d=0, q=2, 0,1,1,7,  plot=F)
PREVISAO <- ts(PREVISAO_remainder$pred, frequency=1) + ts(PREVISAO_t_s$pred, frequency=1) * 1.1
dates_previsão <- list_data <- seq(as.Date(max(index(remainder_ts))),
as.Date(max(index(remainder_ts)+dias)), by = 1)
hc <- highchart(type = "chart") %>%
hc_title( text = 'PREVISÃO PRÓXIMOS 60 DIAS', style = list( color = "#004589", fontSize = "15px") ) %>%
hc_chart(zoomType = "x") %>%
hc_xAxis( categories = unique(dates_previsão) %>% as.Date(format = "%d-%m-%y")) %>%
hc_tooltip( crosshairs = TRUE, borderWidth = 3, sort = TRUE, table = TRUE, valueDecimals = 0
, pointFormat = "<br/><span style='color:{point.color}'>\u25CF</span>{series.name}: <b> {point.y}</b>" ) %>%
hc_add_series(type = "line"
, color = "blue"
, name = "Previsão"
, marker = list( radius = .5)
, data = list_parse2(data.frame( value = as.numeric(PREVISAO)))) %>%
hc_exporting(
enabled = TRUE, # always enabled
filename = "reports/previsao_faturamento"
) %>%
hc_add_theme(hc_theme_gridlight())
hc
